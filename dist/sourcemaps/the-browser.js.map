{"version":3,"sources":["the-browser.js"],"names":[],"mappingsfile":"the-browser.js","sourcesContent":["/*!\n * the-browser.js\n * https://github.com/studio-b12/the-browser\n *\n * Copyright 2014 by Studio B12 GmbH\n * Released under the MIT license\n * https://github.com/studio-b12/the-browser/blob/master/License.md\n */\n\n\nvar theBrowser = (function (navigator) { 'use strict';\n    var is, _init;\n    var self = {};\n\n\n    self.is = is = function theBrowser_is () {\n        /**\n         * @function theBrowser.is\n         * @param {Array} browserTable\n         * @returns {Boolean}\n         */\n        if (arguments[0] && arguments[0] instanceof Array) {\n            return is._byBrowserTable(arguments[0]);\n            }\n\n        /**\n         * @function theBrowser.is\n         * @param {String} browserName\n         * @returns {Boolean}\n         */\n        else if (typeof arguments[0] == 'string') {\n            return is._byBrowserName(arguments[0]);\n            }\n\n        /**\n         * @function theBrowser.is\n         * @param {Object} browserData\n         * @returns {Boolean}\n         */\n        else if (typeof arguments[0] == 'object') {\n            return is._byBrowserData(arguments[0]);\n            }\n\n        return false;\n        };\n\n    is._byBrowserTable = function theBrowser_is_byBrowserTable (browserTable) {\n        var browserData;\n        while ((browserData = browserTable.pop())) {\n            if (self.is(browserData)) return true;\n            }\n\n        return false;\n        };\n\n    is._byBrowserName = function theBrowser_is_byBrowserName (browserName) {\n        if (browserName.toLowerCase() === self.name.toLowerCase()) return true;\n        else return false;\n        };\n\n    is._byBrowserData = function theBrowser_is_byBrowserData (browserData) {\n        if (  typeof browserData.name !== 'string'\n           || ( self.name.toLowerCase() !== browserData.name.toLowerCase()\n              )\n           || (  typeof browserData.minVersion == 'number'\n              && parseInt(self.version) < browserData.minVersion\n              )\n           || (  typeof browserData.maxVersion == 'number'\n              && parseInt(self.version) > browserData.maxVersion\n              )\n           || (  typeof browserData.version == 'number'\n              && parseInt(self.version) !== browserData.version\n              )\n           || (  typeof browserData.Version == 'string'\n              && self.version !== browserData.version\n              )\n           ) return false;\n\n        else return true;\n        };\n\n\n    self._init = _init = function theBrowser_init () {\n        var quickMatch;\n        var agent = navigator.userAgent;\n\n\n        // Credits to http://stackoverflow.com/a/2401861/2816199 .\n        var matches = (  agent.match(/(opera|chrome|safari|firefox|msie|trident)[\\/ ]*([\\d.]+)/i)\n                      || []\n                      );\n\n\n        // Detect new IE versions.\n        if (/trident/i.test(matches[1])) {\n            quickMatch = /\\brv[ :]+([\\d.]+)/g.exec(agent) || [];\n            self.name = 'Internet Explorer';\n            self.version = (quickMatch[1] || null);\n            return self;\n            }\n\n\n        // Detect Opera.\n        if (/chrome/i.test(matches[1])) {\n            quickMatch = agent.match(/\\bOPR\\/([\\d.]+)/);\n            if (quickMatch !== null) {\n                self.name = 'Opera';\n                self.version = quickMatch[1];\n                return self;\n                }\n            }\n\n\n        // Detect other browsers,\n        if (matches[2]) {\n            self.name = matches[1];\n            self.version = matches[2];\n            }\n\n        // …or fall back to navigator,\n        else {\n            self.name = navigator.appName;\n            self.version = navigator.appVersion;\n            }\n\n        // …then normalize the name for ancient versions of IE.\n        if (/msie/i.test(self.name)) {\n            self.name = 'Internet Explorer';\n            }\n\n\n        // Pull out the goofy-style version.\n        quickMatch = agent.match(/version\\/([\\d.]+)/i);\n        if (quickMatch) {\n            self.version = quickMatch[1];\n            }\n\n        return self;\n        };\n\n\n    return _init();\n    }(window.navigator));\n\n\n/* exported theBrowser */\n"],"sourceRoot":"/source/"}